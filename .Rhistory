This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt$var <- pt$POPTO2010
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
pt
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt$var <- pt$INV_DECLARE
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
pt
i
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt$var <- pt$INV_DECLARE
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt$var <- pt$INV_DECLARE
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
```{r}
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
fdc
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
summary(fdc)
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt$var <- pt$NBR_ADI
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
pt
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
pt$size
pt$var
pt$NBR_ADI
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
pt
print(pt)
pt
pt[, "id"]
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id_snuts3"], donnees[, "del"])
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id_snuts3"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
print(pt)
pt$var <- pt$NBR_ADI
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
LegTitle <- "Nombre \nd'habitants\n"
## Tracer des cercles dont la taille indique les valeurs de la variable population.
rLeg <- quantile(pt$size, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rLeg
rVal <- quantile(pt$var, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rVal
l <- data.frame(x = x1, y = y1);head(l)
xinit <- l$x + rLeg[1];xinit
ypos <- l$y + rLeg;ypos
symbols(x = rep(xinit, 4), y = ypos, circles = rLeg, add = TRUE, bg = "red", inches = FALSE)
text(x = rep(xinit, 4) + rLeg[1] * 1.2, y = (l$y + (2 * rLeg)), rVal, cex = 0.3,  srt = 0, adj = 0)
for (i in 1:4) {
segments(xinit, (l$y + (2 * rLeg[i])), xinit + rLeg[1] * 1.1, (l$y + (2 *
rLeg[i])))
}
text(x = xinit - rLeg[1], y = (l$y + (2 * rLeg[1])), LegTitle, adj = c(0, 0), cex = 0.7)
# Titre
title(main = "Population, 2010",  cex.sub = 0.7)
# Ã©chelle
xscale <- x2
yscale <- y1
sizescale <- 50000
labelscale <- "50km"
SpatialPolygonsRescale(layout.scale.bar(), offset = c(xscale, yscale), scale = sizescale,
fill = c("black"), plot.grid = F)
text(xscale + sizescale/2, yscale, paste(labelscale, "\n\n", sep = ""), cex = 0.7)
#fleche nord
xarrow <- x1
yarrow <- y2 - (y2 - y1)/10
SpatialPolygonsRescale(layout.north.arrow(2), offset = c(xarrow, yarrow), scale = 50000,
plot.grid = F)
i=match(fdc@data[, "id"], donnees[, "del"])
fdc@data <- data.frame(fdc@data, donnees[i,])
fdc@data$var <- fdc@data$IDRVA2011
var <- as.vector(na.omit(fdc@data$var))
nbclass <- 8
library(classInt)
distr <- classIntervals(var, nbclass, style = "quantile")$brks
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id_snuts3"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
print(pt)
pt$var <- pt$NBR_ADI
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id_snuts3"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
print(pt)
pt$var <- pt$NBR_ADI
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
LegTitle <- "Nombre \nd'habitants\n"
## Tracer des cercles dont la taille indique les valeurs de la variable population.
rLeg <- quantile(pt$size, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rLeg
rVal <- quantile(pt$var, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rVal
l <- data.frame(x = x1, y = y1);head(l)
xinit <- l$x + rLeg[1];xinit
ypos <- l$y + rLeg;ypos
symbols(x = rep(xinit, 4), y = ypos, circles = rLeg, add = TRUE, bg = "red", inches = FALSE)
text(x = rep(xinit, 4) + rLeg[1] * 1.2, y = (l$y + (2 * rLeg)), rVal, cex = 0.3,  srt = 0, adj = 0)
for (i in 1:4) {
segments(xinit, (l$y + (2 * rLeg[i])), xinit + rLeg[1] * 1.1, (l$y + (2 *
rLeg[i])))
}
text(x = xinit - rLeg[1], y = (l$y + (2 * rLeg[1])), LegTitle, adj = c(0, 0), cex = 0.7)
# Titre
title(main = "Population, 2010",  cex.sub = 0.7)
# Ã©chelle
xscale <- x2
yscale <- y1
sizescale <- 50000
labelscale <- "50km"
SpatialPolygonsRescale(layout.scale.bar(), offset = c(xscale, yscale), scale = sizescale,
fill = c("black"), plot.grid = F)
text(xscale + sizescale/2, yscale, paste(labelscale, "\n\n", sep = ""), cex = 0.7)
#fleche nord
xarrow <- x1
yarrow <- y2 - (y2 - y1)/10
SpatialPolygonsRescale(layout.north.arrow(2), offset = c(xarrow, yarrow), scale = 50000,
plot.grid = F)
i=match(fdc@data[, "id"], donnees[, "del"])
fdc@data <- data.frame(fdc@data, donnees[i,])
fdc@data$var <- fdc@data$IDRVA2011
var <- as.vector(na.omit(fdc@data$var))
nbclass <- 8
library(classInt)
distr <- classIntervals(var, nbclass, style = "quantile")$brks
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id_snuts3"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
print(pt)
pt$var <- pt$NBR_ADI
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
LegTitle <- "Nombre \nd'habitants\n"
## Tracer des cercles dont la taille indique les valeurs de la variable population.
rLeg <- quantile(pt$size, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rLeg
rVal <- quantile(pt$var, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rVal
l <- data.frame(x = x1, y = y1);head(l)
xinit <- l$x + rLeg[1];xinit
ypos <- l$y + rLeg;ypos
symbols(x = rep(xinit, 4), y = ypos, circles = rLeg, add = TRUE, bg = "red", inches = FALSE)
text(x = rep(xinit, 4) + rLeg[1] * 1.2, y = (l$y + (2 * rLeg)), rVal, cex = 0.3,  srt = 0, adj = 0)
for (i in 1:4) {
segments(xinit, (l$y + (2 * rLeg[i])), xinit + rLeg[1] * 1.1, (l$y + (2 *
rLeg[i])))
}
text(x = xinit - rLeg[1], y = (l$y + (2 * rLeg[1])), LegTitle, adj = c(0, 0), cex = 0.7)
# Titre
title(main = "Population, 2010",  cex.sub = 0.7)
# Ã©chelle
xscale <- x2
yscale <- y1
sizescale <- 50000
labelscale <- "50km"
SpatialPolygonsRescale(layout.scale.bar(), offset = c(xscale, yscale), scale = sizescale,
fill = c("black"), plot.grid = F)
text(xscale + sizescale/2, yscale, paste(labelscale, "\n\n", sep = ""), cex = 0.7)
#fleche nord
xarrow <- x1
yarrow <- y2 - (y2 - y1)/10
SpatialPolygonsRescale(layout.north.arrow(2), offset = c(xarrow, yarrow), scale = 50000,
plot.grid = F)
i=match(fdc@data[, "id_snuts3"], donnees[, "del"])
fdc@data <- data.frame(fdc@data, donnees[i,])
fdc@data$var <- fdc@data$IDRVA2011
var <- as.vector(na.omit(fdc@data$var))
nbclass <- 8
library(classInt)
distr <- classIntervals(var, nbclass, style = "quantile")$brks
# For Data Manipulation
library(tidyverse)
install.packages("tidyverse")
install.packages("cluster")
install.packages("dbscan")
install.packages("tidyverse")
install.packages("dbscan")
install.packages("factoextra")
install.packages("fpc")
install.packages("fpc")
install.packages("dbscan")
install.packages("install.packages("fpc")")
install.packages("factoextra")
# For Data Manipulation
library(tidyverse)
install.packages("tidyverse")
install.packages("fpc")
# For Data Manipulation
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(maptools)
library(sp)
library(shapefiles)
fdc <- readShapePoly("geom/Tunisie_snuts4.shp")
#fdc<- readShapeSpatial(file.choose())
names(fdc)
summary(fdc)
donnees <- read.csv("adi-2018.csv", header = TRUE, sep = ";", dec = ",", encoding = "latin1")
dim(donnees)
pt <- cbind(fdc@data[, "id_snuts3"], as.data.frame(coordinates(fdc)))
colnames(pt) <- c("id", "x", "y")
i=match(pt[, "id"], donnees[, "del"])
pt <- data.frame(pt, donnees[i, ])
print(pt)
pt$var <- pt$INV_DECLARE
x1 <- bbox(fdc)[1]
y1 <- bbox(fdc)[2]
x2 <- bbox(fdc)[3]
y2 <- bbox(fdc)[4]
sfdc <- (x2 - x1) * (y2 - y1)
sc <- sum(pt$var, na.rm = TRUE)
sc
k <- 0.2
pt$size <- sqrt((pt$var * k * sfdc/sc)/pi)
plot(fdc, border = "white", col = "grey")
symbols(x=pt[, "x"], y=pt[, "y"], circles = pt$size, add = TRUE, bg = "red", inches = FALSE)
LegTitle <- "Nombre \nd'individu \ndeclarÃ©\n"
# Tracer des cercles dont la taille indique les valeurs de la variable inv declarÃ©
rLeg <- quantile(pt$size, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rLeg
rVal <- quantile(pt$var, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rVal
l <- data.frame(x = x1, y = y1);head(l)
xinit <- l$x + rLeg[1];xinit
ypos <- l$y + rLeg;ypos
symbols(x = rep(xinit, 4), y = ypos, circles = rLeg, add = TRUE, bg = "red", inches = FALSE)
text(x = rep(xinit, 4) + rLeg[1] * 1.2, y = (l$y + (2 * rLeg)), rVal, cex = 0.3,  srt = 0, adj = 0)
for (i in 1:4) {
segments(xinit, (l$y + (2 * rLeg[i])), xinit + rLeg[1] * 1.1, (l$y + (2 *
rLeg[i])))
}
text(x = xinit - rLeg[1], y = (l$y + (2 * rLeg[1])), LegTitle, adj = c(0, 0), cex = 0.7)
#Titre
title(main = "INDIVIDU DECLARE",  cex.sub = 0.7)
#Ã©chelle
xscale <- x2
yscale <- y1
sizescale <- 50000
labelscale <- "50km"
SpatialPolygonsRescale(layout.scale.bar(), offset = c(xscale, yscale), scale = sizescale,
fill = c("black"), plot.grid = F)
text(xscale + sizescale/2, yscale, paste(labelscale, "\n\n", sep = ""), cex = 0.7)
#fleche nord
xarrow <- x1
yarrow <- y2 - (y2 - y1)/10
SpatialPolygonsRescale(layout.north.arrow(2), offset = c(xarrow, yarrow), scale = 50000,
plot.grid = F)
i=match(fdc@data[, "id_snuts3"], donnees[, "del"])
fdc@data <- data.frame(fdc@data, donnees[i,])
fdc@data$var <- fdc@data$NBR_EMPLOI_PERVU
var <- as.vector(na.omit(fdc@data$var))
nbclass <- 8
library(classInt)
distr <- classIntervals(var, nbclass, style = "quantile")$brks
library(RColorBrewer)
colours <- brewer.pal(nbclass, "YlOrRd")
colMap <- colours[(findInterval(fdc$var, distr, all.inside = TRUE))]
plot(fdc, col = colMap, border = "black", lwd = 1)
#legende
legend(x = "topright", legend = leglabs(round(distr, 2), over = "plus de", under = "moins de"),
fill = colours, bty = "n", pt.cex = 1, cex = 0.7, title = "indice 0-1")
#Titre
title(main = "Indicateur de developpement des emploi prevu regional",
cex.sub = 0.7)
# For Data Manipulation
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("sp")
install.packages("tidyverse")
install.packages("tidyverse")
